// los archivos tiene mas detalles sobre  pasos  // esta parte es de back end del programa 

Paso 1: el jason file se inicion con el comando "npm install"

Paso 2: el node modules , packake lock.json y package.json se creo con el siguente comando
        npm i --save express mongoose body-parser bcrypt js cors

Paso 3 :crear la carpeta de config/ crear el archivo de config.jason
        configurar el JSON file para que contenga la informacion del servidor // config.JSON
Paso 4 :crear y configurar el config.js dentro de la misma carpeta de config

Paso 5 : Crear el archivo de App.js en el root de la aplicacion y configurarla 


Paso6 : en esta etapa puede provar si el sistema se conecta con la base de dato utilizando el 
        comando de : node app.js
Paso: opcional // para que no tengas que correr el codigo node app.js cada rato para ver si la connection esta realizada
        puedes instalar el makage de nodemon para que aga "refesh " cada tiempo que le das save a el codigo
        ejemplo : npm  - i nodemon -> press enter...... y para ejecutar el godigo utilisar en el comand promt 
        el comando : nodemon (y el nombre de el archivo) // ejemplo , nodemon app.js-> press ennter
Paso 7: Como estamos trabajando con Usuarios debemos hacerle ahora un link  a la base de datos
        hara defenir un mongoose model/ Utilizare el nombre de Users en el archivo de models

paso 8: crear un controller for the user Registration  // utilizare el nobre de controller
paso 9: crear un directorio para estableser la ruta // nuevo directorio y un archivo de index.rauter.js

paso 10: ahora mismo puede enviar un post utilizando el postman para poder provar que estan recibiendo informacion




Paso 15: Crear un nuevo directorio para el Angular Front end 

Paso:16: comand ng new "nombre del directorio" este caso es core   np new core    
Paso 17: ejecutar el comando ng g c "nombre del directorio" para otro directorio de Usuarios 
        ejemplo : ng g c user // este  es como el directorio padre
Paso 18: para el directorio hijo  entrar al directorio de User y correr el siguiente comando ng g c "nombre del directorio"
                ejemplo: ng g c sign-up 





Paso:30:Instalar el Angular 6, ng  new core// core es el nombre del directorio

Paso 31:installar el JsonWeb Token ,passport y lodash//en el directorio de server ejecutar el siguente comando         
        npm install --save jsonwebtoken passport passport-local lodash
Paso 32 : Configurar el passport utilizando local strategy
        a) crea un archivo dentro del servidor llamado passportConfig.js

Paso 33: crear un directorio y crear sus atributos // model class
        comando: ng g class -- type=model
                        genera la clase y la brinda la extencion tipo model
        dentro de esta clase , se establese cuales seran los atributos de la clase: este caso, password,email y user name 
 
paso 35: estableser los atributos en el CSS de como se vera la forma // este  esta en el archivo de src//styles.css

paso 36: declarar en el user.service.ts  el Usuario  , importando del archivo de user.model.ts  

        ejemplo: import {User} from "..User/model";// no se tiene que poner la extencion del mismo

paso 37: Crear la forma de Sign up ,este esta en la modificacion del archivo de sign-up.component.html  
        acordar que se tiene que utilisazar las propiedades ya establesidas, como la del fullName, email y password

Paso 38:dentro del directorio de src buscar el archivo de app.component.html y poner el siguiente cogido
        <router-outlet></router-outlet>// esto es para que saque la informacion del user.component.html
        

paso 39: creal el archivo de  routes.ts dentro del directorio de src // dentro del archivo continua los pasos
        pasar crea la rutas             
Paso 40: despues de crear la forma , tambien tendra que realizar la validaciones en la parte del cliente 
        ejemplo: <input type="text" #fullName="ngModel" [(ngModel)]="userService.selectedUser.fullName" 
        name="fullName" placeholder="Enter your Name"
        required  [ngClass]="{'invalid-textbox' :signUpForm.submitted && !fullName.valid }">

paso 41: en el directorio enviroments , en el archivo de enviroments.ts  dentro de la funcion inclu
        ir la dirrecion de la base de dato , para  cuando llames el API se pueda conectar       
        ejemplo:
                 apiBaseUrl:'http://localHost:3000/api'
                                // la direcion basica donde esta la base de datos para conectarse


//recursos 



https://www.npmjs.com/package/bcrypt
https://angular.io/guide/quickstart
https://jwt.io/
https://mean.io
https://www.npmjs.com/package/express.io
https://nodejs.org/en/




data base set Up config
        esta como default,              
        para debe crear una base de Dato con el nombre de UsersStackDB y como arguemento: users